generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String
  firstName     String
  lastName      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  wishlist      Wishlist?
  addresses     Address[]
  role          Role         @relation(fields: [roleId], references: [id])
  roleId        String
  sessions      Session[]
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  permissions Permission[]
}

model Permission {
  id   String @id @default(cuid())
  name String @unique
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

// Products
model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orders      OrderItem[]
  images      ProductImage[]
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String
  products    Product[]
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToCategory")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

// Orders
model Order {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  status       OrderStatus   @relation(fields: [statusId], references: [id])
  statusId     String
  totalAmount  Float
  items        OrderItem[]
  shippingInfo ShippingInfo?
  payment      Payment?
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  productId String
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model OrderStatus {
  id    String  @id @default(cuid())
  name  String  @unique
  orders Order[]
}

// Payments
model Payment {
  id           String   @id @default(cuid())
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id])
  paymentDate  DateTime
  amount       Float
  method       PaymentMethod   @relation(fields: [methodId], references: [id])
  methodId     String
  status       PaymentStatus   @relation(fields: [statusId], references: [id])
  statusId     String
}

model PaymentMethod {
  id         String  @id @default(cuid())
  name       String  @unique
  payments   Payment[]
}

model PaymentStatus {
  id         String  @id @default(cuid())
  name       String  @unique
  payments   Payment[]
}

// Reviews
model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

// Shipping
model ShippingInfo {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  addressId  String
  address    Address  @relation(fields: [addressId], references: [id])
  trackingNumber String?
  status     ShippingStatus @relation(fields: [statusId], references: [id])
  statusId   String
}

model ShippingStatus {
  id        String  @id @default(cuid())
  name      String  @unique
  shipments ShippingInfo[]
}

// Address
model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  state     String
  postalCode String
  country   String
  orders    Order[]
}

// Cart and Wishlist
model Cart {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  productId String
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  cart      Cart     @relation(fields: [cartId], references: [id])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  productId String
  wishlistId String
  product   Product  @relation(fields: [productId], references: [id])
  wishlist  Wishlist @relation(fields: [wishlistId], references: [id])
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  type      NotificationType @relation(fields: [typeId], references: [id])
  typeId    String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model NotificationType {
  id            String          @id @default(cuid())
  name          String          @unique
  notifications Notification[]
}

// Discounts and Coupons
model Discount {
  id           String    @id @default(cuid())
  code         String    @unique
  description  String
  percentage   Float
  validFrom    DateTime
  validTo      DateTime
  usageLimit   Int
  usedCount    Int       @default(0)
  orders       Order[]
}

model Coupon {
  id           String    @id @default(cuid())
  code         String    @unique
  description  String
  discount     Float
  validFrom    DateTime
  validTo      DateTime
  usageLimit   Int
  usedCount    Int       @default(0)
  orders       Order[]
}

// Analytics and Tracking
model PageView {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  pageUrl    String
  createdAt  DateTime @default(now())
}

model EventLog {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  eventType  String
  details    Json
  createdAt  DateTime @default(now())
}

// Support and Helpdesk
model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  status      SupportTicketStatus @relation(fields: [statusId], references: [id])
  statusId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    SupportMessage[]
}

model SupportTicketStatus {
  id           String  @id @default(cuid())
  name         String  @unique
  supportTickets SupportTicket[]
}

model SupportMessage {
  id            String   @id @default(cuid())
  ticketId      String
  ticket        SupportTicket @relation(fields: [ticketId], references: [id])
  senderUserId  String
  senderUser    User     @relation(fields: [senderUserId], references: [id])
  message       String
  createdAt     DateTime @default(now())
}

// Logistics and Inventory Management
model Warehouse {
  id       String    @id @default(cuid())
  location String
  items    InventoryItem[]
}

model InventoryItem {
  id          String    @id @default(cuid())
  productId   String
  warehouseId String
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  quantity    Int
}

// Loyalty Program
model LoyaltyProgram {
  id           String   @id @default(cuid())
  name         String
  description  String
  pointsPerDollar Float
  rewards      LoyaltyReward[]
}

model LoyaltyReward {
  id              String  @id @default(cuid())
  name            String
  requiredPoints  Int
  loyaltyProgramId String
  loyaltyProgram  LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id])
  users           User[]
}

// Subscriptions
model Subscription {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  plan          SubscriptionPlan @relation(fields: [planId], references: [id])
  planId        String
  startedAt     DateTime
  expiresAt     DateTime
  isActive      Boolean  @default(true)
}

model SubscriptionPlan {
  id            String  @id @default(cuid())
  name          String
  price         Float
  durationDays  Int
  subscriptions Subscription[]
}

// Marketing
model Campaign {
  id        String   @id @default(cuid())
  name      String
  type      CampaignType @relation(fields: [typeId], references: [id])
  typeId    String
  startDate DateTime
  endDate   DateTime
}

model CampaignType {
  id        String   @id @default(cuid())
  name      String   @unique
  campaigns Campaign[]
}

model Advertisement {
  id        String   @id @default(cuid())
  campaignId String
  campaign  Campaign @relation(fields: [campaignId], references: [id])
  content   String
  startDate DateTime
  endDate   DateTime
}
